/*CREDITS * This Code is heavily influenced by the NodeBox Colors Library.  * See http://nodebox.net/code/index.php/Colors and http://nodebox.net *  * Ported and rewritten in 2009 by Philipp Laeubli and licensed under GPL.  * See LICENSE.txt for details. *  * Copyright (c) 2009 Tom De Smedt, Frederic De Bleser & Philipp Laeubli */package ch.badmojo.color {	import flash.display.Sprite;			/**	 * @author phil	 */	public class ColorWheel {		private var _list : Vector.<Color>;		private var _index : Number;		public function ColorWheel(firstColor : Color = null) {			_list = new Vector.<Color>();			_index = 0;				if(firstColor != null) {				addColor(firstColor);			}		}		public function addColor(color : Color) : void {			_list.push(color);		}		public function getColor() : Color {			var result : Color = _list[_index];			rotate();			return result;		}		public function getVector() : Vector.<Color> {			return _list;		}		private function rotate() : void {			if(_index == _list.length - 1) {				_index = 0;						} else {				_index++;			}		}		public function brighten(amount : Number = 10) : void {			for each (var color : Color in _list) {				color.brighten(amount);			}		}		public function darken(amount : Number = 10) : void {			for each (var color : Color in _list) {				color.darken(amount);			}		}		public function saturate(amount : Number = 10) : void {			for each (var color : Color in _list) {				color.saturate(amount);			}		}		public function deSaturate(amount : Number = 10) : void {			for each (var color : Color in _list) {				color.deSaturate(amount);			}		}		public function getColorBar() : Sprite {			var bar : Sprite = new Sprite();						for (var i : Number = 0;i < _list.length; i++) {				var sprite : Sprite = _list[i].getSample();				bar.addChild(sprite);						sprite.y = i * sprite.height;			}						return bar;		}		public function copy() : ColorWheel {			var newWheel : ColorWheel = new ColorWheel();			for each (var color : Color in _list) {				newWheel.addColor(color.copy());			}			return newWheel;		}		public function contains(newColor : Color) : Boolean {			for each (var color : Color in _list) {				if(color.isEqual(newColor)) {					return true;				}			}			return false;		}
		public function mix(secondWheel : ColorWheel) : void {			var cw2 : Vector.<Color> = secondWheel.getVector();			for each (var c : Color in cw2) {				this.addColor(c);			} 		}		public function shuffle() : void {			_list.sort(onShuffle);		}		public function sortByBrightness() : void {			_list.sort(onBrightness);		}		private function onShuffle(ob1 : Color , ob2 : Color) : Number {			var rnd : Number = (Math.random() * 1.2) - 0.6;			if(rnd < 0.2 && rnd > -0.2) {				return 0;			}			if(rnd > 0.2) {				return 1;			}			if(rnd < -0.2) {				return -1;			}			return -1;		}		private function onBrightness(c1 : Color, c2 : Color) : Number {			if(c1.getBrightness() > c2.getBrightness()) {				return -1;			}	else if(c1.getBrightness() == c2.getBrightness()) {				return 0;			}	else if(c1.getBrightness() < c2.getBrightness()) {				return 1;			}			return -1;		}	}}